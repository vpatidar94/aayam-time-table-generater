{"version":3,"sources":["pages/TTPages/List/List.js","pages/TTPages/NewTT/NewTT.js"],"names":["teachers_list","FacultyID","Faculty","subject","batch","BatchID","Batch","CourseID","time","LectureID","Lecture","Time_From","Time_To","NewTT","_useState","useState","_useState2","_slicedToArray","apiData","setApiData","_useState3","_useState4","tableWidth","setTableWidth","_useState5","_useState6","draggedCellKey","setDraggedCellKey","_useState7","_useState8","duplicateElements","setDuplicateElements","_useState9","_useState10","setDuplicateDetected","_useState11","_useState12","teacherCounter","setTeacherCounter","_useState13","_useState14","teacherAssignment","setTeacherAssignment","_useState15","_useState16","image","setImage","divRef","useRef","useEffect","callApi","console","log","localStorage","setItem","JSON","stringify","fetch","then","response","json","result","catch","error","dragItem","tableElement","document","querySelector","offsetWidth","handleDrop","e","key","_objectSpread2","sourceAssignment","targetAssignment","_objectSpread","_defineProperty","teacher_assignment","current","prevCount","teacherCount","teacher","rowId","split","teacherInCurrentRow","cellKey","startsWith","push","duplicates","reduce","acc","item","newDuplicateKeys","Object","values","filter","keys","length","flat","includes","checkForDuplicateInRow","allowDrop","ev","t","target","classList","contains","parentNode","innerText","trim","preventDefault","_apiData$Object","responseObject","_responseObject$Batch","_responseObject$Facul","FacultyList","_responseObject$UserL","UserList","facultyNameMap","forEach","user","UserID","UserName","updatedFacultyList","map","faculty","_jsxs","_Fragment","children","_jsx","onClick","className","ref","classtime","b","_teacherAssignment$ke","_teacherAssignment$ke2","_teacherAssignment$ke3","_teacherAssignment$ke4","concat","id","draggable","onDragOver","onDrop","onDragStart","handleTableCellDragStart","removeTeacher","RxCross2","html2canvas","canvas","imgData","toDataURL","src","alt","style","maxWidth","index","bgColor","facultyUser","find","facultyName","teacherInfo"],"mappings":"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","file":"static/js/12.e6cba63d.chunk.js","sourcesContent":["import {v4 as uuidv4} from \"uuid\"\nexport const teachers_list = [\n        {\n            FacultyID: 22,\n            Faculty: \"MYK\",\n            subject: \"Physics\"\n        },\n        \n        {\n            FacultyID: 3038,\n            Faculty: \"KPS\",\n            subject:\"Chemistry\"\n        },\n\n        {\n            FacultyID: 2029,\n            Faculty: \"MRS\",\n            subject:\"Chemistry\"\n        },\n\n        {\n            FacultyID: 3051,\n            Faculty: \"MAS\",\n            subject:\"Physics\"\n        },\n\n        {\n            FacultyID: 3050,\n            Faculty: \"RSS\",\n            subject:\"Physics\"\n        },\n        {\n            FacultyID: 25,\n            Faculty: \"NMS\",\n            subject:\"Biology\"\n        },\n        {\n            FacultyID: 3037,\n            Faculty: \"HDS\",\n            subject:\"Chemistry\"\n        },\n        {\n            FacultyID: 3032,\n            Faculty: \"MNM\",\n            subject: \"Biology\"\n        },\n        \n        {\n            FacultyID: 1023,\n            Faculty: \"SJ\",\n            subject:\"Biology\"\n        },\n\n        {\n            FacultyID: 1025,\n            Faculty: \"AJ\",\n            subject:\"Biology\"\n        },\n\n        {\n            FacultyID: 1026,\n            Faculty: \"DMPS\",\n            subject:\"Chemistry\"\n        },\n\n        \n       \n        \n        {\n            FacultyID: 1027,\n            Faculty: \"PSJ\",\n            subject:\"Physics\"\n        },\n        {\n            FacultyID: 3033,\n            Faculty: \"YBS\",\n            subject:\"Biology\"\n        },\n        {\n            FacultyID: 3030,\n            Faculty: \"AKS\",\n            subject:\"Chemistry\"\n        },\n        {\n            FacultyID: 2028,\n            Faculty: \"AMS\",\n            subject:\"Maths\"\n        },\n        {\n            FacultyID: 3031,\n            Faculty: \"NDS\",\n            subject:\"Physics\"\n        },\n        {\n            FacultyID: 3052,\n            Faculty: \"HWS\",\n            subject:\"Physics\"\n        },\n        {\n            FacultyID: 1029,\n            Faculty: \"JRS\",\n            subject:\"Chemistry\"\n        },\n        {\n            FacultyID: 3053,\n            Faculty: \"HTS\",\n            subject:\"Chemistry\"\n        },\n    ]; \n    \n\nexport const batch= [\n    {\n        BatchID: 1,\n        Batch: \"A1\",\n        CourseID: 3\n    },\n    {\n        BatchID: 6,\n        Batch: \"A2\",\n        CourseID: 3\n    },\n    {\n        BatchID: 10,\n        Batch: \"A3\",\n        CourseID: 3\n    },\n    {\n        BatchID: 7,\n        Batch: \"A4\",\n        CourseID: 3\n    },\n    {\n        BatchID: 3,\n        Batch: \"C1\",\n        CourseID: 1\n    },\n    {\n        BatchID: 15,\n        Batch: \"C2\",\n        CourseID: 1\n    },\n    {\n        BatchID: 2,\n        Batch: \"B1\",\n        CourseID: 2\n    },\n    {\n        BatchID: 3049,\n        Batch: \"B2\",\n        CourseID: 2\n    },\n    //MORE BATCHES ADDED WITH A FAKE BATCHID AND FAKE COURSEID NEED TO CHANGE LATER\n\n    {\n        BatchID: 20,\n        Batch: \"JO1\",\n        CourseID: 13\n    },\n    {\n        BatchID: 3042,\n        Batch: \"JXI-1\",\n        CourseID: 11\n    },\n    {\n        BatchID: 3061,\n        Batch: \"JXI-2\",\n        CourseID: 11\n    },\n    {\n        BatchID: 22,\n        Batch: \"JXII-1\",\n        CourseID: 12\n    },\n    {\n        BatchID: 3079,\n        Batch: \"JEE XL\",\n        CourseID: 1025\n    },\n    {\n        BatchID: 3078,\n        Batch: \"JEE adv\",\n        CourseID: 13\n    }\n]\n\n\nexport const time= [\n    {\n        LectureID: 1,\n        Lecture: \"L1\",\n        Time_From: \"08:30 AM\",\n        Time_To: \"09:45 AM\"\n    },\n    {\n        LectureID: 2,\n        Lecture: \"L2\",\n        Time_From: \"09:50 AM\",\n        Time_To: \"11:05 AM\"\n    },\n    {\n        LectureID: 3,\n        Lecture: \"L3\",\n        Time_From: \"11:20 AM\",\n        Time_To: \"12:35 PM\"\n    },\n    {\n        LectureID: 4,\n        Lecture: \"L4\",\n        Time_From: \"12:40 PM\",\n        Time_To: \"01:55 PM\"\n    },\n    {\n        LectureID: 5,\n        Lecture: \"L5\",\n        Time_From: \"02:00 PM\",\n        Time_To: \"03:15 PM\"\n    },\n    {\n        LectureID: 6,\n        Lecture: \"L6\",\n        Time_From: \"03:20 PM\",\n        Time_To: \"04:35 PM\"\n    },\n    {\n        LectureID: 7,\n        Lecture: \"L7\",\n        Time_From: \"04:50 PM\",\n        Time_To: \"06:05 PM\"\n    },\n    {\n        LectureID: 8,\n        Lecture: \"L8\",\n        Time_From: \"06:15 PM\",\n        Time_To: \"07:30 PM\"\n    }\n]\n","\n// import React, { useEffect, useRef, useState } from 'react';\n// import { batch, teachers_list, time } from '../List/List';\n// import { RxCross2 } from \"react-icons/rx\";\n// // import { RiDeleteBin2Line } from \"react-icons/ri\";\n// // import htmlToCanvas from 'html-to-canvas';\n// import \"./NewTT.css\";\n// import html2canvas from 'html2canvas';\n\n\n\n// const NewTT = () => {\n\n// const [apiData, setApiData] = useState({});\n\n  \n\n\n//   const [tableWidth, setTableWidth] = useState(0);\n//   const [draggedCellKey, setDraggedCellKey] = useState(null);\n//   const [duplicateElements, setDuplicateElements] = useState({});\n//   const [duplicateDetected, setDuplicateDetected] = useState(false);\n//   const [teacher, setTeacher] = useState({});\n//   const [teacherCounter, setTeacherCounter] = useState({}); // key: teacherId, value: counter\n//   const [teacherAssignment, setTeacherAssignment] = useState({});\n\n//   // const [teacherAssignment, setTeacherAssignment] = useState(() => {\n//   //   const saved = localStorage.getItem(\"teacherAssignment\");\n//   //   const data = saved ? JSON.parse(saved) : {};\n  \n//   //   console.log(\"Loaded teacherAssignment:\", data\n//   //   return data;\n//   // });\n  \n//   // const [teacherCounter, setTeacherCounter] = useState(() => {\n//   //   const saved = localStorage.getItem(\"teacherCounter\");\n//   //   const data = saved ? JSON.parse(saved) : {};\n//   //   console.log(\"Loaded teacherCounter:\", data);\n//   //   return data;\n//   // });\n  \n  \n  \n  \n  \n//   const [image, setImage] = useState(null);   //  for div to image conversion\n\n//   useEffect(() => {\n//     callApi();\n//   }, []);\n\n//   useEffect(() => {\n//     console.log(\"Saving teacherAssignment:\", teacherAssignment);\n//     console.log(\"Saving teacherCounter:\", teacherCounter);\n//     const saved = localStorage.getItem(\"teacherAssignment\");\n//     const data = saved ? JSON.parse(saved) : {};\n//     setTeacherAssignment(data);\n//     console.log(teacherAssignment);\n//     // localStorage.setItem(\"teacherAssignment\", JSON.stringify(teacherAssignment));\n//     // localStorage.setItem(\"teacherCounter\", JSON.stringify(teacherCounter));\n//   }, []);\n  \n  \n\n\n\n//   const divRef = useRef(null);\n\n//   const callApi=()=>{\n//   // var requestOptions = {\n//   //   method: 'GET',\n//   //   redirect: 'follow'\n//   // };\n  \n//   // fetch(\"http://api.hexaloop.in//api/GetMasterData\", requestOptions)\n//   // .then(response => response.json())\n//   // .then(result => setApiData(result))\n//   // .catch(error => console.log('error', error));\n    \n//   // }\n//   var requestOptions = {\n//     method: 'GET',\n//     redirect: 'follow'\n//   };\n  \n//   fetch(\"https://api.aayamcareerinstitute.co.in/api/GetMasterData\", requestOptions)\n//   .then(response => response.json())\n//   .then(result => setApiData(result))\n//   .catch(error => console.log('error', error));\n    \n//   }\n\n\n//   const { Object: responseObject = {} } = apiData;\n//   const { Batch = [],FacultyList=[] } = responseObject;\n\n  \n\n//   const convertToImage = () => {\n//     html2canvas(divRef.current).then(canvas => {\n//       const imgData = canvas.toDataURL();\n//       setImage(imgData);\n//     }).catch(error => {\n//       console.error(error);\n//     });\n//   };             // for div to image conversion\n\n  \n  \n  \n  \n//   const dragItem = useRef();\n//   // const dragOverItem = useRef();\n//   // const ref=useRef();\n\n//   // const dragStart = (e, position) => {\n//   //   dragItem.current = position;\n//   //   // console.log(e.target.innerHTML);\n//   // };\n  \n//   const dragStart = (e, teacherInfo) => {\n//     dragItem.current = teacherInfo;\n//   };\n\n//   // const dragEnter = (e, position, teacherDragged, className) => {\n//   //   if (!teacher || !teacher.teacher) {\n//   //     setTeacher({teacher: teacherDragged, className});\n//   //   }\n//   // };\n\n//   const handleTableCellDragStart = (e, key) => {\n//     setDraggedCellKey(key);\n//   };\n\n\n//   const checkForDuplicateInRow = (key) => {\n//     const rowId = key.split('_')[0];\n//     const teacherInCurrentRow = [];\n  \n//     for (const cellKey in teacherAssignment) {\n//       if (cellKey.startsWith(rowId)) {\n//         teacherInCurrentRow.push({\n//           key: cellKey,\n//           teacher: teacherAssignment[cellKey].teacher,\n//         });\n//       }\n//     }\n  \n//     const duplicates = teacherInCurrentRow.reduce((acc, item) => {\n//       if (acc[item.teacher]) {\n//         acc[item.teacher].push(item.key);\n//       } else {\n//         acc[item.teacher] = [item.key];\n//       }\n//       return acc;\n//     }, {});\n  \n//     const newDuplicateKeys = Object.values(duplicates)\n//       .filter((keys) => keys.length > 1)\n//       .flat();\n  \n//     const oldDuplicateKeys = Object.keys(duplicateElements);\n  \n//     const isNewDuplicate = !oldDuplicateKeys.includes(key) && newDuplicateKeys.includes(key);\n  \n//     if (isNewDuplicate) {\n//       setDuplicateDetected(true);\n//       setDuplicateElements(\n//         newDuplicateKeys.reduce((acc, key) => {\n//           acc[key] = true;\n//           return acc;\n//         }, {})\n//       );\n//     }\n//   };\n\n\n//   useEffect(() => {\n//     const tableElement = document.querySelector('.table-style');\n//     if (tableElement) {\n//       const tableWidth = tableElement.offsetWidth;\n//       setTableWidth(tableWidth);\n//     }\n//   }, []);\n\n//   useEffect(() => {                                           \n//     if (duplicateDetected) {\n//       alert('Two same teachers found in the same row');\n//       setDuplicateDetected(false);\n//       setTimeout(() => {\n//         setDuplicateElements({});\n//       }, 3000); // Blink duration\n//     }\n//     }, [duplicateDetected]);                                   \n\n\n  \n//     const handleDrop = (e, key) => {\n//       if (draggedCellKey) {\n//         // Move table item\n//         const sourceAssignment = teacherAssignment[draggedCellKey];\n//         const targetAssignment = teacherAssignment[key];\n    \n//         setTeacherAssignment({\n//           ...teacherAssignment,\n//           [draggedCellKey]: targetAssignment,\n//           [key]: sourceAssignment,\n//         });\n    \n//         setDraggedCellKey(null);\n//       } else {\n//         // Assign teacher to the cell\n//         const teacher_assignment = { ...teacherAssignment };\n//         teacher_assignment[key] = dragItem.current;\n//         setTeacherAssignment(teacher_assignment);\n    \n//         setTeacher({});\n    \n//         const teacherCount = { ...teacherCounter };\n//         if (!teacherCount[dragItem.current.teacher]) {\n//           teacherCount[dragItem.current.teacher] = 1;\n//         } else {\n//           teacherCount[dragItem.current.teacher] += 1;\n//         }\n//         setTeacherCounter(teacherCount);\n    \n//         checkForDuplicateInRow(key);\n        \n//       }\n//     };\n    \n    \n\n//     useEffect(() => {\n//       if (duplicateDetected) {\n//         // alert('Two same teachers found in the same row');   \n//         setDuplicateDetected(false);\n//       }\n//     }, [duplicateDetected]);\n\n//     const allowDrop = (ev) => {\n//       let t = ev.target;\n//       while (t && (!t.classList || !t.classList.contains(\"each-block\"))) {\n//         t = t.parentNode;\n//       }\n//       if (t && t.innerText.trim() !== \"\" ) {\n//         // Prevent drop event if cell is not empty\n//         return false;\n//       }\n//       ev.preventDefault();\n//     };\n\n  \n  \n//     const removeTeacher = (key) => {\n//       const teacher_assignment = { ...teacherAssignment };\n//       const teacherCount = { ...teacherCounter };\n    \n//       if (teacherCount[teacherAssignment[key].teacher]) {\n//         teacherCount[teacherAssignment[key].teacher] -= 1;\n//       }\n    \n//       delete teacher_assignment[key];\n    \n//       setTeacherAssignment(teacher_assignment);\n//       setTeacher({});\n//       setTeacherCounter(teacherCount);\n//     };\n    \n        \n  \n//     return (\n//       <>\n//       <button onClick={callApi}>Call</button>\n//       {/* <div>\n//       <ul>\n//         {Batch.map((batch) => (\n//           <li key={batch.BatchID}>{batch.Batch}</li>\n//         ))}\n//       </ul>\n//     </div> */}\n//       <div className=\"bg-container\">\n      \n//        <h1 className='heading-style'>CLASS SCHEDULE</h1>\n//       <div>\n//        <div ref={divRef}>\n//        <table className='table-style'>\n//   <tbody>\n//     <tr>\n//       <td className='F-style time-style'>Time</td>\n//       {/* {batch.map((each) => {\n//         return (\n//           <td className='F-style batch-style'>{each.batchname}</td>\n//         )\n//       })} */}\n\n//       {Batch.map((batch) => {\n//         return(\n//           <td className='F-style batch-style' key={batch.BatchID}>{batch.Batch}</td>\n//         )})}\n//     </tr>\n//     {time.map((t) => {\n//       return (\n//         <tr>\n//           <td className='F-style time-style'>{t.classtime}</td>\n//           {/* {batch.map((b) => { */}\n//           {Batch.map((b) => {\n\n//             const key = t.id + '_' + b.id\n//             return (\n//               <td\n//                 draggable={true}\n//                 onDragOver={allowDrop}\n//                 onDrop={(e) => handleDrop(e, key)}\n//                 onDragStart={(e) => teacherAssignment[key] && handleTableCellDragStart(e, key)}\n//                 key={key}\n//                 id={key}\n//                 className={`each-block ${duplicateElements[key] ? \"blink\" : \"\"} ${teacherAssignment[key]?.className}`}\n//               >\n//                 {teacherAssignment[key] && (\n//                   <div className={`teacname-cross-style ${teacherAssignment[key]?.className} `}>\n//                     <div className=\"teacher-name\">\n//                       {teacherAssignment[key]?.teacher}\n//                     </div>\n//                     <div className=\"cross-btn-container\">\n//                       {teacherAssignment[key]?.teacher ? (\n//                         <button\n//                           className=\"cross-style\"\n//                           onClick={() => removeTeacher(key)}\n//                         >\n//                           <RxCross2 />\n//                         </button>\n//                       ) : (\n//                         ''\n//                       )}\n//                     </div>\n//                   </div>\n//                 )}\n//               </td>\n//             )\n//           })}\n//         </tr>\n//       )\n//     })}\n//   </tbody>\n// </table>\n\n//        </div>\n//        <button onClick={convertToImage}>Convert to Image</button>\n//       {image && <img src={image} alt=\"table\" style={{ maxWidth: tableWidth}}/>}\n      \n//     </div>\n    \n\n//         <div className='teacher-container'style={{ maxWidth: tableWidth}}>\n//           {/* {teachers_list.map((teacher, index) => {\n//           const { name, bgColor, className } = teacher;\n//           return (\n//             <div\n//   style={{ maxWidth: tableWidth }}\n//   key={name}\n//   className={`teacher-item  ${bgColor} ${className}`}\n//   draggable={true}\n//   onDragStart={(e) => dragStart(e, { teacher: name, className: bgColor })}\n// >\n//   <h3>{name}</h3>\n//   {teacherCounter[name] > 0 && (\n//     <span className={`counter-item ${bgColor}`} draggable={false}>\n//       {teacherCounter[name]}\n//     </span>\n//   )}\n// </div>            ); */}\n\n\n\n// {FacultyList.map((teacher, index) => {\n          \n//           return (\n//             <div\n//   style={{ maxWidth: tableWidth }}\n//   key={teacher}\n//   className={`teacher-item`}\n//   draggable={true}\n//   onDragStart={(e) => dragStart(e, { teacher })}\n// >\n//   <h3>{teacher.Faculty}</h3>\n//   {teacherCounter[teacher] > 0 && (\n//     <span className={`counter-item `} draggable={false}>\n//       {teacherCounter[teacher]}\n//     </span>\n//   )}\n// </div>            );\n//           })}\n//         </div>\n//       </div>\n//   </>\n//   )\n//   }\n\n  \n  \n\n// export default NewTT;\n\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { batch, teachers_list, time } from '../List/List';\n// import { batch } from '../../../const/batchList';\n// import { teachers_list } from '../../../const/teacherList';\n// import { time } from '../../../const/time';\nimport { RxCross2 } from \"react-icons/rx\";\n// import { RiDeleteBin2Line } from \"react-icons/ri\";\n// import htmlToCanvas from 'html-to-canvas';\nimport \"./NewTT.css\";\nimport html2canvas from 'html2canvas';\n\nconst NewTT = () => {\n  const [apiData, setApiData] = useState({});\n  const [tableWidth, setTableWidth] = useState(0);\n  const [draggedCellKey, setDraggedCellKey] = useState(null);\n  const [duplicateElements, setDuplicateElements] = useState({});\n  const [duplicateDetected, setDuplicateDetected] = useState(false);\n  const [teacherCounter, setTeacherCounter] = useState({});\n  const [teacherAssignment, setTeacherAssignment] = useState({});\n  const [image, setImage] = useState(null);\n\n  const divRef = useRef(null);\n\n  useEffect(() => {\n    callApi();\n  }, []);\n\n  useEffect(() => {\n    console.log('Saving teacherAssignment:', teacherAssignment);\n    console.log('Saving teacherCounter:', teacherCounter);\n    localStorage.setItem('teacherAssignment', JSON.stringify(teacherAssignment));\n    localStorage.setItem('teacherCounter', JSON.stringify(teacherCounter));\n  }, [teacherAssignment, teacherCounter]);\n\n  const callApi = () => {\n    fetch('https://api.aayamcareerinstitute.co.in/api/GetMasterData')\n      .then((response) => response.json())\n      .then((result) => setApiData(result))\n      .catch((error) => console.log('error', error));\n  };\n\n  const convertToImage = () => {\n    html2canvas(divRef.current)\n      .then((canvas) => {\n        const imgData = canvas.toDataURL();\n        setImage(imgData);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  const dragItem = useRef();\n\n  const dragStart = (e, teacherInfo) => {\n    dragItem.current = teacherInfo;\n  };\n\n  const handleTableCellDragStart = (e, key) => {\n    setDraggedCellKey(key);\n  };\n\n  const checkForDuplicateInRow = (key) => {\n    const rowId = key.split('_')[0];\n    const teacherInCurrentRow = [];\n\n    for (const cellKey in teacherAssignment) {\n      if (cellKey.startsWith(rowId)) {\n        teacherInCurrentRow.push({\n          key: cellKey,\n          teacher: teacherAssignment[cellKey].teacher,\n        });\n      }\n    }\n\n    const duplicates = teacherInCurrentRow.reduce((acc, item) => {\n      if (acc[item.teacher]) {\n        acc[item.teacher].push(item.key);\n      } else {\n        acc[item.teacher] = [item.key];\n      }\n      return acc;\n    }, {});\n\n    const newDuplicateKeys = Object.values(duplicates)\n      .filter((keys) => keys.length > 1)\n      .flat();\n\n    const oldDuplicateKeys = Object.keys(duplicateElements);\n\n    const isNewDuplicate = !oldDuplicateKeys.includes(key) && newDuplicateKeys.includes(key);\n\n    if (isNewDuplicate) {\n      setDuplicateDetected(true);\n      setDuplicateElements(\n        newDuplicateKeys.reduce((acc, key) => {\n          acc[key] = true;\n          return acc;\n        }, {})\n      );\n    }\n  };\n\n  useEffect(() => {\n    const tableElement = document.querySelector('.table-style');\n    if (tableElement) {\n      const tableWidth = tableElement.offsetWidth;\n      setTableWidth(tableWidth);\n    }\n  }, []);\n\n  const handleDrop = (e, key) => {\n    if (draggedCellKey) {\n      const sourceAssignment = teacherAssignment[draggedCellKey];\n      const targetAssignment = teacherAssignment[key];\n\n      setTeacherAssignment({\n        ...teacherAssignment,\n        [draggedCellKey]: targetAssignment,\n        [key]: sourceAssignment,\n      });\n\n      setDraggedCellKey(null);\n    } else {\n      const teacher_assignment = { ...teacherAssignment };\n      teacher_assignment[key] = dragItem.current;\n      setTeacherAssignment(teacher_assignment);\n\n      setTeacherCounter((prevCount) => {\n        const teacherCount = { ...prevCount };\n        const { teacher } = dragItem.current;\n        teacherCount[teacher] = teacherCount[teacher] ? teacherCount[teacher] + 1 : 1;\n        return teacherCount;\n      });\n\n      checkForDuplicateInRow(key);\n    }\n  };\n\n  const allowDrop = (ev) => {\n    let t = ev.target;\n    while (t && (!t.classList || !t.classList.contains('each-block'))) {\n      t = t.parentNode;\n    }\n    if (t && t.innerText.trim() !== '') {\n      return false;\n    }\n    ev.preventDefault();\n  };\n\n  const removeTeacher = (key) => {\n    const teacher_assignment = { ...teacherAssignment };\n    const teacherCount = { ...teacherCounter };\n\n    if (teacherCount[teacherAssignment[key].teacher]) {\n      teacherCount[teacherAssignment[key].teacher] -= 1;\n    }\n\n    delete teacher_assignment[key];\n\n    setTeacherAssignment(teacher_assignment);\n    setTeacherCounter(teacherCount);\n  };\n\n  const { Object: responseObject = {} } = apiData;\n  const { Batch = [], FacultyList = [], UserList = [] } = responseObject;\n  const facultyNameMap = {};\n\n  UserList.forEach((user) => {\n    facultyNameMap[user.UserID] = user.UserName;\n  });\n\n  const updatedFacultyList = FacultyList.map((faculty) => ({\n    ...faculty,\n    Faculty: facultyNameMap[faculty.FacultyID] || faculty.Faculty,\n  }));\n\n  return (\n    <>\n      <button onClick={callApi}>Call</button>\n      <div className=\"bg-container\">\n        <h1 className=\"heading-style\">CLASS SCHEDULE</h1>\n        <div>\n          <div ref={divRef}>\n            <table className=\"table-style\">\n              <tbody>\n                <tr>\n                  <td className=\"F-style time-style\">Time</td>\n                  {Batch.map((batch) => (\n                    <td className=\"F-style batch-style\" key={batch.BatchID}>\n                      {batch.Batch}\n                    </td>\n                  ))}\n                </tr>\n                {time.map((t) => (\n                  <tr key={t.id}>\n                    <td className=\"F-style time-style\">{t.classtime}</td>\n                    {Batch.map((b) => {\n                      const key = `${t.id}_${b.id}`;\n                      return (\n                        <td\n                          draggable={true}\n                          onDragOver={allowDrop}\n                          onDrop={(e) => handleDrop(e, key)}\n                          onDragStart={(e) => teacherAssignment[key] && handleTableCellDragStart(e, key)}\n                          key={key}\n                          id={key}\n                          className={`each-block ${duplicateElements[key] ? 'blink' : ''} ${\n                            teacherAssignment[key]?.className\n                          }`}                        >\n                          {teacherAssignment[key] && (\n                            <div className={`teacname-cross-style ${teacherAssignment[key]?.className}`}>\n                              <div className=\"teacher-name\">{teacherAssignment[key]?.teacher}</div>\n                              <div className=\"cross-btn-container\">\n                                {teacherAssignment[key]?.teacher && (\n                                  <button\n                                    className=\"cross-style\"\n                                    onClick={() => removeTeacher(key)}\n                                  >\n                                    <RxCross2 />\n                                  </button>\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <button onClick={convertToImage}>Convert to Image</button>\n          {image && <img src={image} alt=\"table\" style={{ maxWidth: tableWidth }} />}\n        </div>\n\n        <div className=\"teacher-container\" style={{ maxWidth: tableWidth }}>\n          {updatedFacultyList.map((teacher, index) => {\n            const { FacultyID, bgColor, className } = teacher;\n            const facultyUser = UserList.find((user) => user.UserID === FacultyID);\n            const facultyName = facultyUser ? facultyUser.UserName : teacher.Faculty;\n\n            return (\n              <div\n                style={{ maxWidth: tableWidth }}\n                key={FacultyID}\n                className={`teacher-item ${bgColor} ${className}`}\n                draggable={true}\n                onDragStart={(e) => dragStart(e, { teacher: facultyName })}\n              >\n                <h3>{facultyName}</h3>\n                {teacherCounter[facultyName] > 0 && (\n                  <span className={`counter-item ${bgColor}`} draggable={false}>\n                    {teacherCounter[facultyName]}\n                  </span>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default NewTT;\n\n\n\n"],"sourceRoot":""}