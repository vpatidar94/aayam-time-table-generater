{"version":3,"sources":["pages/TTPages/List/List.js","pages/TTPages/NewTT/NewTT.js"],"names":["teachers_list","FacultyID","Faculty","subject","batch","BatchID","Batch","CourseID","time","LectureID","Lecture","Time_From","Time_To","NewTT","_useState","useState","_useState2","_slicedToArray","apiData","setApiData","_useState3","_useState4","tableWidth","setTableWidth","_useState5","_useState6","draggedCellKey","setDraggedCellKey","_useState7","_useState8","duplicateElements","setDuplicateElements","_useState9","_useState10","setDuplicateDetected","_useState11","_useState12","teacherCounter","setTeacherCounter","_useState13","_useState14","teacherAssignment","setTeacherAssignment","_useState15","_useState16","image","setImage","divRef","useRef","useEffect","callApi","console","log","localStorage","setItem","JSON","stringify","fetch","then","response","json","result","catch","error","dragItem","tableElement","document","querySelector","offsetWidth","handleDrop","e","key","_objectSpread2","sourceAssignment","targetAssignment","_objectSpread","_defineProperty","teacher_assignment","current","prevCount","teacherCount","teacher","rowId","split","teacherInCurrentRow","cellKey","startsWith","push","duplicates","reduce","acc","item","newDuplicateKeys","Object","values","filter","keys","length","flat","includes","checkForDuplicateInRow","allowDrop","ev","t","target","classList","contains","parentNode","innerText","trim","preventDefault","_apiData$Object","responseObject","_responseObject$Batch","_responseObject$Facul","FacultyList","_responseObject$UserL","UserList","facultyNameMap","forEach","user","UserID","UserName","updatedFacultyList","map","faculty","_jsxs","_Fragment","children","_jsx","onClick","className","ref","classtime","b","_teacherAssignment$ke","_teacherAssignment$ke2","_teacherAssignment$ke3","_teacherAssignment$ke4","concat","id","draggable","onDragOver","onDrop","onDragStart","handleTableCellDragStart","removeTeacher","RxCross2","html2canvas","canvas","imgData","toDataURL","src","alt","style","maxWidth","index","bgColor","facultyUser","find","facultyName","teacherInfo"],"mappings":"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","file":"static/js/12.3c6a0f1f.chunk.js","sourcesContent":["import {v4 as uuidv4} from \"uuid\"\r\nexport const teachers_list = [\r\n        {\r\n            FacultyID: 22,\r\n            Faculty: \"MYK\",\r\n            subject: \"Physics\"\r\n        },\r\n        \r\n        {\r\n            FacultyID: 3038,\r\n            Faculty: \"KPS\",\r\n            subject:\"Chemistry\"\r\n        },\r\n\r\n        {\r\n            FacultyID: 2029,\r\n            Faculty: \"MRS\",\r\n            subject:\"Chemistry\"\r\n        },\r\n\r\n        {\r\n            FacultyID: 3051,\r\n            Faculty: \"MAS\",\r\n            subject:\"Physics\"\r\n        },\r\n\r\n        {\r\n            FacultyID: 3050,\r\n            Faculty: \"RSS\",\r\n            subject:\"Physics\"\r\n        },\r\n        {\r\n            FacultyID: 25,\r\n            Faculty: \"NMS\",\r\n            subject:\"Biology\"\r\n        },\r\n        {\r\n            FacultyID: 3037,\r\n            Faculty: \"HDS\",\r\n            subject:\"Chemistry\"\r\n        },\r\n        {\r\n            FacultyID: 3032,\r\n            Faculty: \"MNM\",\r\n            subject: \"Biology\"\r\n        },\r\n        \r\n        {\r\n            FacultyID: 1023,\r\n            Faculty: \"SJ\",\r\n            subject:\"Biology\"\r\n        },\r\n\r\n        {\r\n            FacultyID: 1025,\r\n            Faculty: \"AJ\",\r\n            subject:\"Biology\"\r\n        },\r\n\r\n        {\r\n            FacultyID: 1026,\r\n            Faculty: \"DMPS\",\r\n            subject:\"Chemistry\"\r\n        },\r\n\r\n        \r\n       \r\n        \r\n        {\r\n            FacultyID: 1027,\r\n            Faculty: \"PSJ\",\r\n            subject:\"Physics\"\r\n        },\r\n        {\r\n            FacultyID: 3033,\r\n            Faculty: \"YBS\",\r\n            subject:\"Biology\"\r\n        },\r\n        {\r\n            FacultyID: 3030,\r\n            Faculty: \"AKS\",\r\n            subject:\"Chemistry\"\r\n        },\r\n        {\r\n            FacultyID: 2028,\r\n            Faculty: \"AMS\",\r\n            subject:\"Maths\"\r\n        },\r\n        {\r\n            FacultyID: 3031,\r\n            Faculty: \"NDS\",\r\n            subject:\"Physics\"\r\n        },\r\n        {\r\n            FacultyID: 3052,\r\n            Faculty: \"HWS\",\r\n            subject:\"Physics\"\r\n        },\r\n        {\r\n            FacultyID: 1029,\r\n            Faculty: \"JRS\",\r\n            subject:\"Chemistry\"\r\n        },\r\n        {\r\n            FacultyID: 3053,\r\n            Faculty: \"HTS\",\r\n            subject:\"Chemistry\"\r\n        },\r\n    ]; \r\n    \r\n\r\nexport const batch= [\r\n    {\r\n        BatchID: 1,\r\n        Batch: \"A1\",\r\n        CourseID: 3\r\n    },\r\n    {\r\n        BatchID: 6,\r\n        Batch: \"A2\",\r\n        CourseID: 3\r\n    },\r\n    {\r\n        BatchID: 10,\r\n        Batch: \"A3\",\r\n        CourseID: 3\r\n    },\r\n    {\r\n        BatchID: 7,\r\n        Batch: \"A4\",\r\n        CourseID: 3\r\n    },\r\n    {\r\n        BatchID: 3,\r\n        Batch: \"C1\",\r\n        CourseID: 1\r\n    },\r\n    {\r\n        BatchID: 15,\r\n        Batch: \"C2\",\r\n        CourseID: 1\r\n    },\r\n    {\r\n        BatchID: 2,\r\n        Batch: \"B1\",\r\n        CourseID: 2\r\n    },\r\n    {\r\n        BatchID: 3049,\r\n        Batch: \"B2\",\r\n        CourseID: 2\r\n    },\r\n    //MORE BATCHES ADDED WITH A FAKE BATCHID AND FAKE COURSEID NEED TO CHANGE LATER\r\n\r\n    {\r\n        BatchID: 20,\r\n        Batch: \"JO1\",\r\n        CourseID: 13\r\n    },\r\n    {\r\n        BatchID: 3042,\r\n        Batch: \"JXI-1\",\r\n        CourseID: 11\r\n    },\r\n    {\r\n        BatchID: 3061,\r\n        Batch: \"JXI-2\",\r\n        CourseID: 11\r\n    },\r\n    {\r\n        BatchID: 22,\r\n        Batch: \"JXII-1\",\r\n        CourseID: 12\r\n    },\r\n    {\r\n        BatchID: 3079,\r\n        Batch: \"JEE XL\",\r\n        CourseID: 1025\r\n    },\r\n    {\r\n        BatchID: 3078,\r\n        Batch: \"JEE adv\",\r\n        CourseID: 13\r\n    }\r\n]\r\n\r\n\r\nexport const time= [\r\n    {\r\n        LectureID: 1,\r\n        Lecture: \"L1\",\r\n        Time_From: \"08:30 AM\",\r\n        Time_To: \"09:45 AM\"\r\n    },\r\n    {\r\n        LectureID: 2,\r\n        Lecture: \"L2\",\r\n        Time_From: \"09:50 AM\",\r\n        Time_To: \"11:05 AM\"\r\n    },\r\n    {\r\n        LectureID: 3,\r\n        Lecture: \"L3\",\r\n        Time_From: \"11:20 AM\",\r\n        Time_To: \"12:35 PM\"\r\n    },\r\n    {\r\n        LectureID: 4,\r\n        Lecture: \"L4\",\r\n        Time_From: \"12:40 PM\",\r\n        Time_To: \"01:55 PM\"\r\n    },\r\n    {\r\n        LectureID: 5,\r\n        Lecture: \"L5\",\r\n        Time_From: \"02:00 PM\",\r\n        Time_To: \"03:15 PM\"\r\n    },\r\n    {\r\n        LectureID: 6,\r\n        Lecture: \"L6\",\r\n        Time_From: \"03:20 PM\",\r\n        Time_To: \"04:35 PM\"\r\n    },\r\n    {\r\n        LectureID: 7,\r\n        Lecture: \"L7\",\r\n        Time_From: \"04:50 PM\",\r\n        Time_To: \"06:05 PM\"\r\n    },\r\n    {\r\n        LectureID: 8,\r\n        Lecture: \"L8\",\r\n        Time_From: \"06:15 PM\",\r\n        Time_To: \"07:30 PM\"\r\n    }\r\n]\r\n","\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import { batch, teachers_list, time } from '../List/List';\r\n// import { RxCross2 } from \"react-icons/rx\";\r\n// // import { RiDeleteBin2Line } from \"react-icons/ri\";\r\n// // import htmlToCanvas from 'html-to-canvas';\r\n// import \"./NewTT.css\";\r\n// import html2canvas from 'html2canvas';\r\n\r\n\r\n\r\n// const NewTT = () => {\r\n\r\n// const [apiData, setApiData] = useState({});\r\n\r\n  \r\n\r\n\r\n//   const [tableWidth, setTableWidth] = useState(0);\r\n//   const [draggedCellKey, setDraggedCellKey] = useState(null);\r\n//   const [duplicateElements, setDuplicateElements] = useState({});\r\n//   const [duplicateDetected, setDuplicateDetected] = useState(false);\r\n//   const [teacher, setTeacher] = useState({});\r\n//   const [teacherCounter, setTeacherCounter] = useState({}); // key: teacherId, value: counter\r\n//   const [teacherAssignment, setTeacherAssignment] = useState({});\r\n\r\n//   // const [teacherAssignment, setTeacherAssignment] = useState(() => {\r\n//   //   const saved = localStorage.getItem(\"teacherAssignment\");\r\n//   //   const data = saved ? JSON.parse(saved) : {};\r\n  \r\n//   //   console.log(\"Loaded teacherAssignment:\", data\r\n//   //   return data;\r\n//   // });\r\n  \r\n//   // const [teacherCounter, setTeacherCounter] = useState(() => {\r\n//   //   const saved = localStorage.getItem(\"teacherCounter\");\r\n//   //   const data = saved ? JSON.parse(saved) : {};\r\n//   //   console.log(\"Loaded teacherCounter:\", data);\r\n//   //   return data;\r\n//   // });\r\n  \r\n  \r\n  \r\n  \r\n  \r\n//   const [image, setImage] = useState(null);   //  for div to image conversion\r\n\r\n//   useEffect(() => {\r\n//     callApi();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     console.log(\"Saving teacherAssignment:\", teacherAssignment);\r\n//     console.log(\"Saving teacherCounter:\", teacherCounter);\r\n//     const saved = localStorage.getItem(\"teacherAssignment\");\r\n//     const data = saved ? JSON.parse(saved) : {};\r\n//     setTeacherAssignment(data);\r\n//     console.log(teacherAssignment);\r\n//     // localStorage.setItem(\"teacherAssignment\", JSON.stringify(teacherAssignment));\r\n//     // localStorage.setItem(\"teacherCounter\", JSON.stringify(teacherCounter));\r\n//   }, []);\r\n  \r\n  \r\n\r\n\r\n\r\n//   const divRef = useRef(null);\r\n\r\n//   const callApi=()=>{\r\n//   // var requestOptions = {\r\n//   //   method: 'GET',\r\n//   //   redirect: 'follow'\r\n//   // };\r\n  \r\n//   // fetch(\"http://api.hexaloop.in//api/GetMasterData\", requestOptions)\r\n//   // .then(response => response.json())\r\n//   // .then(result => setApiData(result))\r\n//   // .catch(error => console.log('error', error));\r\n    \r\n//   // }\r\n//   var requestOptions = {\r\n//     method: 'GET',\r\n//     redirect: 'follow'\r\n//   };\r\n  \r\n//   fetch(\"https://api.aayamcareerinstitute.co.in/api/GetMasterData\", requestOptions)\r\n//   .then(response => response.json())\r\n//   .then(result => setApiData(result))\r\n//   .catch(error => console.log('error', error));\r\n    \r\n//   }\r\n\r\n\r\n//   const { Object: responseObject = {} } = apiData;\r\n//   const { Batch = [],FacultyList=[] } = responseObject;\r\n\r\n  \r\n\r\n//   const convertToImage = () => {\r\n//     html2canvas(divRef.current).then(canvas => {\r\n//       const imgData = canvas.toDataURL();\r\n//       setImage(imgData);\r\n//     }).catch(error => {\r\n//       console.error(error);\r\n//     });\r\n//   };             // for div to image conversion\r\n\r\n  \r\n  \r\n  \r\n  \r\n//   const dragItem = useRef();\r\n//   // const dragOverItem = useRef();\r\n//   // const ref=useRef();\r\n\r\n//   // const dragStart = (e, position) => {\r\n//   //   dragItem.current = position;\r\n//   //   // console.log(e.target.innerHTML);\r\n//   // };\r\n  \r\n//   const dragStart = (e, teacherInfo) => {\r\n//     dragItem.current = teacherInfo;\r\n//   };\r\n\r\n//   // const dragEnter = (e, position, teacherDragged, className) => {\r\n//   //   if (!teacher || !teacher.teacher) {\r\n//   //     setTeacher({teacher: teacherDragged, className});\r\n//   //   }\r\n//   // };\r\n\r\n//   const handleTableCellDragStart = (e, key) => {\r\n//     setDraggedCellKey(key);\r\n//   };\r\n\r\n\r\n//   const checkForDuplicateInRow = (key) => {\r\n//     const rowId = key.split('_')[0];\r\n//     const teacherInCurrentRow = [];\r\n  \r\n//     for (const cellKey in teacherAssignment) {\r\n//       if (cellKey.startsWith(rowId)) {\r\n//         teacherInCurrentRow.push({\r\n//           key: cellKey,\r\n//           teacher: teacherAssignment[cellKey].teacher,\r\n//         });\r\n//       }\r\n//     }\r\n  \r\n//     const duplicates = teacherInCurrentRow.reduce((acc, item) => {\r\n//       if (acc[item.teacher]) {\r\n//         acc[item.teacher].push(item.key);\r\n//       } else {\r\n//         acc[item.teacher] = [item.key];\r\n//       }\r\n//       return acc;\r\n//     }, {});\r\n  \r\n//     const newDuplicateKeys = Object.values(duplicates)\r\n//       .filter((keys) => keys.length > 1)\r\n//       .flat();\r\n  \r\n//     const oldDuplicateKeys = Object.keys(duplicateElements);\r\n  \r\n//     const isNewDuplicate = !oldDuplicateKeys.includes(key) && newDuplicateKeys.includes(key);\r\n  \r\n//     if (isNewDuplicate) {\r\n//       setDuplicateDetected(true);\r\n//       setDuplicateElements(\r\n//         newDuplicateKeys.reduce((acc, key) => {\r\n//           acc[key] = true;\r\n//           return acc;\r\n//         }, {})\r\n//       );\r\n//     }\r\n//   };\r\n\r\n\r\n//   useEffect(() => {\r\n//     const tableElement = document.querySelector('.table-style');\r\n//     if (tableElement) {\r\n//       const tableWidth = tableElement.offsetWidth;\r\n//       setTableWidth(tableWidth);\r\n//     }\r\n//   }, []);\r\n\r\n//   useEffect(() => {                                           \r\n//     if (duplicateDetected) {\r\n//       alert('Two same teachers found in the same row');\r\n//       setDuplicateDetected(false);\r\n//       setTimeout(() => {\r\n//         setDuplicateElements({});\r\n//       }, 3000); // Blink duration\r\n//     }\r\n//     }, [duplicateDetected]);                                   \r\n\r\n\r\n  \r\n//     const handleDrop = (e, key) => {\r\n//       if (draggedCellKey) {\r\n//         // Move table item\r\n//         const sourceAssignment = teacherAssignment[draggedCellKey];\r\n//         const targetAssignment = teacherAssignment[key];\r\n    \r\n//         setTeacherAssignment({\r\n//           ...teacherAssignment,\r\n//           [draggedCellKey]: targetAssignment,\r\n//           [key]: sourceAssignment,\r\n//         });\r\n    \r\n//         setDraggedCellKey(null);\r\n//       } else {\r\n//         // Assign teacher to the cell\r\n//         const teacher_assignment = { ...teacherAssignment };\r\n//         teacher_assignment[key] = dragItem.current;\r\n//         setTeacherAssignment(teacher_assignment);\r\n    \r\n//         setTeacher({});\r\n    \r\n//         const teacherCount = { ...teacherCounter };\r\n//         if (!teacherCount[dragItem.current.teacher]) {\r\n//           teacherCount[dragItem.current.teacher] = 1;\r\n//         } else {\r\n//           teacherCount[dragItem.current.teacher] += 1;\r\n//         }\r\n//         setTeacherCounter(teacherCount);\r\n    \r\n//         checkForDuplicateInRow(key);\r\n        \r\n//       }\r\n//     };\r\n    \r\n    \r\n\r\n//     useEffect(() => {\r\n//       if (duplicateDetected) {\r\n//         // alert('Two same teachers found in the same row');   \r\n//         setDuplicateDetected(false);\r\n//       }\r\n//     }, [duplicateDetected]);\r\n\r\n//     const allowDrop = (ev) => {\r\n//       let t = ev.target;\r\n//       while (t && (!t.classList || !t.classList.contains(\"each-block\"))) {\r\n//         t = t.parentNode;\r\n//       }\r\n//       if (t && t.innerText.trim() !== \"\" ) {\r\n//         // Prevent drop event if cell is not empty\r\n//         return false;\r\n//       }\r\n//       ev.preventDefault();\r\n//     };\r\n\r\n  \r\n  \r\n//     const removeTeacher = (key) => {\r\n//       const teacher_assignment = { ...teacherAssignment };\r\n//       const teacherCount = { ...teacherCounter };\r\n    \r\n//       if (teacherCount[teacherAssignment[key].teacher]) {\r\n//         teacherCount[teacherAssignment[key].teacher] -= 1;\r\n//       }\r\n    \r\n//       delete teacher_assignment[key];\r\n    \r\n//       setTeacherAssignment(teacher_assignment);\r\n//       setTeacher({});\r\n//       setTeacherCounter(teacherCount);\r\n//     };\r\n    \r\n        \r\n  \r\n//     return (\r\n//       <>\r\n//       <button onClick={callApi}>Call</button>\r\n//       {/* <div>\r\n//       <ul>\r\n//         {Batch.map((batch) => (\r\n//           <li key={batch.BatchID}>{batch.Batch}</li>\r\n//         ))}\r\n//       </ul>\r\n//     </div> */}\r\n//       <div className=\"bg-container\">\r\n      \r\n//        <h1 className='heading-style'>CLASS SCHEDULE</h1>\r\n//       <div>\r\n//        <div ref={divRef}>\r\n//        <table className='table-style'>\r\n//   <tbody>\r\n//     <tr>\r\n//       <td className='F-style time-style'>Time</td>\r\n//       {/* {batch.map((each) => {\r\n//         return (\r\n//           <td className='F-style batch-style'>{each.batchname}</td>\r\n//         )\r\n//       })} */}\r\n\r\n//       {Batch.map((batch) => {\r\n//         return(\r\n//           <td className='F-style batch-style' key={batch.BatchID}>{batch.Batch}</td>\r\n//         )})}\r\n//     </tr>\r\n//     {time.map((t) => {\r\n//       return (\r\n//         <tr>\r\n//           <td className='F-style time-style'>{t.classtime}</td>\r\n//           {/* {batch.map((b) => { */}\r\n//           {Batch.map((b) => {\r\n\r\n//             const key = t.id + '_' + b.id\r\n//             return (\r\n//               <td\r\n//                 draggable={true}\r\n//                 onDragOver={allowDrop}\r\n//                 onDrop={(e) => handleDrop(e, key)}\r\n//                 onDragStart={(e) => teacherAssignment[key] && handleTableCellDragStart(e, key)}\r\n//                 key={key}\r\n//                 id={key}\r\n//                 className={`each-block ${duplicateElements[key] ? \"blink\" : \"\"} ${teacherAssignment[key]?.className}`}\r\n//               >\r\n//                 {teacherAssignment[key] && (\r\n//                   <div className={`teacname-cross-style ${teacherAssignment[key]?.className} `}>\r\n//                     <div className=\"teacher-name\">\r\n//                       {teacherAssignment[key]?.teacher}\r\n//                     </div>\r\n//                     <div className=\"cross-btn-container\">\r\n//                       {teacherAssignment[key]?.teacher ? (\r\n//                         <button\r\n//                           className=\"cross-style\"\r\n//                           onClick={() => removeTeacher(key)}\r\n//                         >\r\n//                           <RxCross2 />\r\n//                         </button>\r\n//                       ) : (\r\n//                         ''\r\n//                       )}\r\n//                     </div>\r\n//                   </div>\r\n//                 )}\r\n//               </td>\r\n//             )\r\n//           })}\r\n//         </tr>\r\n//       )\r\n//     })}\r\n//   </tbody>\r\n// </table>\r\n\r\n//        </div>\r\n//        <button onClick={convertToImage}>Convert to Image</button>\r\n//       {image && <img src={image} alt=\"table\" style={{ maxWidth: tableWidth}}/>}\r\n      \r\n//     </div>\r\n    \r\n\r\n//         <div className='teacher-container'style={{ maxWidth: tableWidth}}>\r\n//           {/* {teachers_list.map((teacher, index) => {\r\n//           const { name, bgColor, className } = teacher;\r\n//           return (\r\n//             <div\r\n//   style={{ maxWidth: tableWidth }}\r\n//   key={name}\r\n//   className={`teacher-item  ${bgColor} ${className}`}\r\n//   draggable={true}\r\n//   onDragStart={(e) => dragStart(e, { teacher: name, className: bgColor })}\r\n// >\r\n//   <h3>{name}</h3>\r\n//   {teacherCounter[name] > 0 && (\r\n//     <span className={`counter-item ${bgColor}`} draggable={false}>\r\n//       {teacherCounter[name]}\r\n//     </span>\r\n//   )}\r\n// </div>            ); */}\r\n\r\n\r\n\r\n// {FacultyList.map((teacher, index) => {\r\n          \r\n//           return (\r\n//             <div\r\n//   style={{ maxWidth: tableWidth }}\r\n//   key={teacher}\r\n//   className={`teacher-item`}\r\n//   draggable={true}\r\n//   onDragStart={(e) => dragStart(e, { teacher })}\r\n// >\r\n//   <h3>{teacher.Faculty}</h3>\r\n//   {teacherCounter[teacher] > 0 && (\r\n//     <span className={`counter-item `} draggable={false}>\r\n//       {teacherCounter[teacher]}\r\n//     </span>\r\n//   )}\r\n// </div>            );\r\n//           })}\r\n//         </div>\r\n//       </div>\r\n//   </>\r\n//   )\r\n//   }\r\n\r\n  \r\n  \r\n\r\n// export default NewTT;\r\n\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { batch, teachers_list, time } from '../List/List';\r\n// import { batch } from '../../../const/batchList';\r\n// import { teachers_list } from '../../../const/teacherList';\r\n// import { time } from '../../../const/time';\r\nimport { RxCross2 } from \"react-icons/rx\";\r\n// import { RiDeleteBin2Line } from \"react-icons/ri\";\r\n// import htmlToCanvas from 'html-to-canvas';\r\nimport \"./NewTT.css\";\r\nimport html2canvas from 'html2canvas';\r\n\r\nconst NewTT = () => {\r\n  const [apiData, setApiData] = useState({});\r\n  const [tableWidth, setTableWidth] = useState(0);\r\n  const [draggedCellKey, setDraggedCellKey] = useState(null);\r\n  const [duplicateElements, setDuplicateElements] = useState({});\r\n  const [duplicateDetected, setDuplicateDetected] = useState(false);\r\n  const [teacherCounter, setTeacherCounter] = useState({});\r\n  const [teacherAssignment, setTeacherAssignment] = useState({});\r\n  const [image, setImage] = useState(null);\r\n\r\n  const divRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    callApi();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log('Saving teacherAssignment:', teacherAssignment);\r\n    console.log('Saving teacherCounter:', teacherCounter);\r\n    localStorage.setItem('teacherAssignment', JSON.stringify(teacherAssignment));\r\n    localStorage.setItem('teacherCounter', JSON.stringify(teacherCounter));\r\n  }, [teacherAssignment, teacherCounter]);\r\n\r\n  const callApi = () => {\r\n    fetch('https://api.aayamcareerinstitute.co.in/api/GetMasterData')\r\n      .then((response) => response.json())\r\n      .then((result) => setApiData(result))\r\n      .catch((error) => console.log('error', error));\r\n  };\r\n\r\n  const convertToImage = () => {\r\n    html2canvas(divRef.current)\r\n      .then((canvas) => {\r\n        const imgData = canvas.toDataURL();\r\n        setImage(imgData);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  const dragItem = useRef();\r\n\r\n  const dragStart = (e, teacherInfo) => {\r\n    dragItem.current = teacherInfo;\r\n  };\r\n\r\n  const handleTableCellDragStart = (e, key) => {\r\n    setDraggedCellKey(key);\r\n  };\r\n\r\n  const checkForDuplicateInRow = (key) => {\r\n    const rowId = key.split('_')[0];\r\n    const teacherInCurrentRow = [];\r\n\r\n    for (const cellKey in teacherAssignment) {\r\n      if (cellKey.startsWith(rowId)) {\r\n        teacherInCurrentRow.push({\r\n          key: cellKey,\r\n          teacher: teacherAssignment[cellKey].teacher,\r\n        });\r\n      }\r\n    }\r\n\r\n    const duplicates = teacherInCurrentRow.reduce((acc, item) => {\r\n      if (acc[item.teacher]) {\r\n        acc[item.teacher].push(item.key);\r\n      } else {\r\n        acc[item.teacher] = [item.key];\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    const newDuplicateKeys = Object.values(duplicates)\r\n      .filter((keys) => keys.length > 1)\r\n      .flat();\r\n\r\n    const oldDuplicateKeys = Object.keys(duplicateElements);\r\n\r\n    const isNewDuplicate = !oldDuplicateKeys.includes(key) && newDuplicateKeys.includes(key);\r\n\r\n    if (isNewDuplicate) {\r\n      setDuplicateDetected(true);\r\n      setDuplicateElements(\r\n        newDuplicateKeys.reduce((acc, key) => {\r\n          acc[key] = true;\r\n          return acc;\r\n        }, {})\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const tableElement = document.querySelector('.table-style');\r\n    if (tableElement) {\r\n      const tableWidth = tableElement.offsetWidth;\r\n      setTableWidth(tableWidth);\r\n    }\r\n  }, []);\r\n\r\n  const handleDrop = (e, key) => {\r\n    if (draggedCellKey) {\r\n      const sourceAssignment = teacherAssignment[draggedCellKey];\r\n      const targetAssignment = teacherAssignment[key];\r\n\r\n      setTeacherAssignment({\r\n        ...teacherAssignment,\r\n        [draggedCellKey]: targetAssignment,\r\n        [key]: sourceAssignment,\r\n      });\r\n\r\n      setDraggedCellKey(null);\r\n    } else {\r\n      const teacher_assignment = { ...teacherAssignment };\r\n      teacher_assignment[key] = dragItem.current;\r\n      setTeacherAssignment(teacher_assignment);\r\n\r\n      setTeacherCounter((prevCount) => {\r\n        const teacherCount = { ...prevCount };\r\n        const { teacher } = dragItem.current;\r\n        teacherCount[teacher] = teacherCount[teacher] ? teacherCount[teacher] + 1 : 1;\r\n        return teacherCount;\r\n      });\r\n\r\n      checkForDuplicateInRow(key);\r\n    }\r\n  };\r\n\r\n  const allowDrop = (ev) => {\r\n    let t = ev.target;\r\n    while (t && (!t.classList || !t.classList.contains('each-block'))) {\r\n      t = t.parentNode;\r\n    }\r\n    if (t && t.innerText.trim() !== '') {\r\n      return false;\r\n    }\r\n    ev.preventDefault();\r\n  };\r\n\r\n  const removeTeacher = (key) => {\r\n    const teacher_assignment = { ...teacherAssignment };\r\n    const teacherCount = { ...teacherCounter };\r\n\r\n    if (teacherCount[teacherAssignment[key].teacher]) {\r\n      teacherCount[teacherAssignment[key].teacher] -= 1;\r\n    }\r\n\r\n    delete teacher_assignment[key];\r\n\r\n    setTeacherAssignment(teacher_assignment);\r\n    setTeacherCounter(teacherCount);\r\n  };\r\n\r\n  const { Object: responseObject = {} } = apiData;\r\n  const { Batch = [], FacultyList = [], UserList = [] } = responseObject;\r\n  const facultyNameMap = {};\r\n\r\n  UserList.forEach((user) => {\r\n    facultyNameMap[user.UserID] = user.UserName;\r\n  });\r\n\r\n  const updatedFacultyList = FacultyList.map((faculty) => ({\r\n    ...faculty,\r\n    Faculty: facultyNameMap[faculty.FacultyID] || faculty.Faculty,\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <button onClick={callApi}>Call</button>\r\n      <div className=\"bg-container\">\r\n        <h1 className=\"heading-style\">CLASS SCHEDULE</h1>\r\n        <div>\r\n          <div ref={divRef}>\r\n            <table className=\"table-style\">\r\n              <tbody>\r\n                <tr>\r\n                  <td className=\"F-style time-style\">Time</td>\r\n                  {Batch.map((batch) => (\r\n                    <td className=\"F-style batch-style\" key={batch.BatchID}>\r\n                      {batch.Batch}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n                {time.map((t) => (\r\n                  <tr key={t.id}>\r\n                    <td className=\"F-style time-style\">{t.classtime}</td>\r\n                    {Batch.map((b) => {\r\n                      const key = `${t.id}_${b.id}`;\r\n                      return (\r\n                        <td\r\n                          draggable={true}\r\n                          onDragOver={allowDrop}\r\n                          onDrop={(e) => handleDrop(e, key)}\r\n                          onDragStart={(e) => teacherAssignment[key] && handleTableCellDragStart(e, key)}\r\n                          key={key}\r\n                          id={key}\r\n                          className={`each-block ${duplicateElements[key] ? 'blink' : ''} ${\r\n                            teacherAssignment[key]?.className\r\n                          }`}                        >\r\n                          {teacherAssignment[key] && (\r\n                            <div className={`teacname-cross-style ${teacherAssignment[key]?.className}`}>\r\n                              <div className=\"teacher-name\">{teacherAssignment[key]?.teacher}</div>\r\n                              <div className=\"cross-btn-container\">\r\n                                {teacherAssignment[key]?.teacher && (\r\n                                  <button\r\n                                    className=\"cross-style\"\r\n                                    onClick={() => removeTeacher(key)}\r\n                                  >\r\n                                    <RxCross2 />\r\n                                  </button>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <button onClick={convertToImage}>Convert to Image</button>\r\n          {image && <img src={image} alt=\"table\" style={{ maxWidth: tableWidth }} />}\r\n        </div>\r\n\r\n        <div className=\"teacher-container\" style={{ maxWidth: tableWidth }}>\r\n          {updatedFacultyList.map((teacher, index) => {\r\n            const { FacultyID, bgColor, className } = teacher;\r\n            const facultyUser = UserList.find((user) => user.UserID === FacultyID);\r\n            const facultyName = facultyUser ? facultyUser.UserName : teacher.Faculty;\r\n\r\n            return (\r\n              <div\r\n                style={{ maxWidth: tableWidth }}\r\n                key={FacultyID}\r\n                className={`teacher-item ${bgColor} ${className}`}\r\n                draggable={true}\r\n                onDragStart={(e) => dragStart(e, { teacher: facultyName })}\r\n              >\r\n                <h3>{facultyName}</h3>\r\n                {teacherCounter[facultyName] > 0 && (\r\n                  <span className={`counter-item ${bgColor}`} draggable={false}>\r\n                    {teacherCounter[facultyName]}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewTT;\r\n\r\n\r\n\r\n"],"sourceRoot":""}