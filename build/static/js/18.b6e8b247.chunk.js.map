{"version":3,"sources":["pages/TTPages/Mobile/Mobile.js"],"names":["Mobile","position","setPosition","useState","x","y","initialPos","setInitialPos","draggableElement","useRef","useEffect","element","current","dragStart","event","dataTransfer","setData","target","id","dragOver","preventDefault","drop","getData","document","getElementById","appendChild","addEventListener","touchStart","touches","clientX","clientY","touchMove","touchEnd","removeEventListener","_jsxs","_Fragment","children","_jsx","ref","draggable","style","transform","concat","touchAction"],"mappings":"kHAAA,yBAkFeA,UAhFAA,KACX,MAAOC,EAAUC,GAAeC,mBAAS,CAAEC,EAAG,EAAGC,EAAG,KAC7CC,EAAYC,GAAiBJ,mBAAS,CAAEC,EAAG,EAAGC,EAAG,IAClDG,EAAmBC,iBAAO,MAsDhC,OApDAC,qBAAU,KACN,MAAMC,EAAUH,EAAiBI,QAG3BC,EAAaC,IACfA,EAAMC,aAAaC,QAAQ,aAAcF,EAAMG,OAAOC,GAAG,EAEvDC,EAAYL,IACdA,EAAMM,gBAAgB,EAEpBC,EAAQP,IACVA,EAAMM,iBACN,MAAMF,EAAKJ,EAAMC,aAAaO,QAAQ,QAChCd,EAAmBe,SAASC,eAAeN,GACjDJ,EAAMG,OAAOQ,YAAYjB,EAAiB,EAE9CG,EAAQe,iBAAiB,YAAab,GACtCF,EAAQe,iBAAiB,WAAYP,GACrCR,EAAQe,iBAAiB,OAAQL,GAGjC,MAAMM,EAAcb,IAChBP,EAAc,CACVH,EAAGU,EAAMc,QAAQ,GAAGC,QAAU5B,EAASG,EACvCC,EAAGS,EAAMc,QAAQ,GAAGE,QAAU7B,EAASI,GACzC,EAEA0B,EAAajB,IACfA,EAAMM,iBACNlB,EAAY,CACRE,EAAGU,EAAMc,QAAQ,GAAGC,QAAUvB,EAAWF,EACzCC,EAAGS,EAAMc,QAAQ,GAAGE,QAAUxB,EAAWD,GAC3C,EAEA2B,EAAWA,KACbzB,EAAcN,EAAS,EAO3B,OALAU,EAAQe,iBAAiB,aAAcC,GACvChB,EAAQe,iBAAiB,YAAaK,GACtCpB,EAAQe,iBAAiB,WAAYM,GAG9B,KACHrB,EAAQsB,oBAAoB,YAAapB,GACzCF,EAAQsB,oBAAoB,WAAYd,GACxCR,EAAQsB,oBAAoB,OAAQZ,GACpCV,EAAQsB,oBAAoB,aAAcN,GAC1ChB,EAAQsB,oBAAoB,YAAaF,GACzCpB,EAAQsB,oBAAoB,WAAYD,EAAS,CACpD,GACF,CAAC1B,EAAYL,IAGZiC,eAAAC,WAAA,CAAAC,SAAA,CACIC,cAAA,OACInB,GAAG,YACHoB,IAAK9B,EACL+B,WAAS,EACTC,MAAO,CACHC,UAAU,aAADC,OAAezC,EAASG,EAAC,QAAAsC,OAAOzC,EAASI,EAAC,OACnDsC,YAAa,QACfP,SACL,YAGDC,cAAA,OAAAD,SACIC,cAAA,KAAAD,SAAG,YAKR,C","file":"static/js/18.b6e8b247.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nconst Mobile = () => {\r\n    const [position, setPosition] = useState({ x: 0, y: 0 });\r\n    const [initialPos, setInitialPos] = useState({ x: 0, y: 0 });\r\n    const draggableElement = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const element = draggableElement.current;\r\n\r\n        // Drag events\r\n        const dragStart = (event) => {\r\n            event.dataTransfer.setData('text/plain', event.target.id);\r\n        };\r\n        const dragOver = (event) => {\r\n            event.preventDefault();\r\n        };\r\n        const drop = (event) => {\r\n            event.preventDefault();\r\n            const id = event.dataTransfer.getData('text');\r\n            const draggableElement = document.getElementById(id);\r\n            event.target.appendChild(draggableElement);\r\n        };\r\n        element.addEventListener('dragstart', dragStart);\r\n        element.addEventListener('dragover', dragOver);\r\n        element.addEventListener('drop', drop);\r\n\r\n        // Touch events\r\n        const touchStart = (event) => {\r\n            setInitialPos({\r\n                x: event.touches[0].clientX - position.x,\r\n                y: event.touches[0].clientY - position.y,\r\n            });\r\n        };\r\n        const touchMove = (event) => {\r\n            event.preventDefault();\r\n            setPosition({\r\n                x: event.touches[0].clientX - initialPos.x,\r\n                y: event.touches[0].clientY - initialPos.y,\r\n            });\r\n        };\r\n        const touchEnd = () => {\r\n            setInitialPos(position);\r\n        };\r\n        element.addEventListener('touchstart', touchStart);\r\n        element.addEventListener('touchmove', touchMove);\r\n        element.addEventListener('touchend', touchEnd);\r\n\r\n        // Clean up event listeners on component unmount\r\n        return () => {\r\n            element.removeEventListener('dragstart', dragStart);\r\n            element.removeEventListener('dragover', dragOver);\r\n            element.removeEventListener('drop', drop);\r\n            element.removeEventListener('touchstart', touchStart);\r\n            element.removeEventListener('touchmove', touchMove);\r\n            element.removeEventListener('touchend', touchEnd);\r\n        };\r\n    }, [initialPos, position]);\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                id='draggable'\r\n                ref={draggableElement}\r\n                draggable\r\n                style={{\r\n                    transform: `translate(${position.x}px, ${position.y}px)`,\r\n                    touchAction: 'none',\r\n                }}\r\n            >\r\n                Drag Me\r\n            </div>\r\n            <div>\r\n                <p>HEY</p>\r\n            </div> \r\n            \r\n            \r\n        \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Mobile;\r\n"],"sourceRoot":""}